{
	"credit": "Made with Blockbench by Cymock",
	"textureSize": [64, 64],
	"models": [
		{
			"part": "cloak",
			"id": "cloak",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"boxes": [
				{
					"coordinates": [-5, 8, -1, 10, 16, 1],
					"uvNorth": [1, 2, 11, 34],
					"uvEast": [0, 2, 1, 34],
					"uvSouth": [12, 2, 22, 34],
					"uvWest": [11, 2, 12, 34],
					"uvUp": [11, 2, 1, 0],
					"uvDown": [21, 0, 11, 2]
				}
			],
			"animations": [
				{
					"var.NewFrame": "if(var.LastFrameCount == frame_counter, 0, 1)",
					"var.frame": "frame_counter",
					"var.player_time": "age",
					"var.frame_time_raw": "(if(var.player_loaded == 0, 0, clamp(if(is_paused, abs(frame_time) * 60, (var.player_time - var.LastPlayerTime) * 3), 0.0001, 5)) + var.LastFrameTime1 + var.LastFrameTime2) / 3",
					"var.frame_time": "if(var.frame_time_raw > 3, 0, var.frame_time_raw) * var.NewFrame",
					"var.LimbSwing_Delta": "(limb_swing - var.LastLimbSwing) * if(move_forward < 0, -1, 1)",
					"var.player_loaded": "if(limb_speed > 0 || is_sneaking && var.frame > 5, 1, var.player_loaded)",
					"var.HeightVelocity": "if(var.player_loaded == 0 || is_in_gui, 0, (pos_y - var.LastHeight) / (var.frame_time) * 0.25)",
					"var.TurningVelocity": "if(var.player_loaded == 0 || is_in_gui, 0, (head_yaw - var.LastDirection) * 0.1 / (var.frame_time) * 0.25)",
					"var.is_levitating": "if(var.LastHeight == pos_y && is_on_ground < 1 && is_in_water < 1 && is_climbing < 1 && is_riding < 1 && is_sitting < 1, 1, 0)",
					"var.VerticalVelocity1": "var.VerticalVelocity1 + clamp((var.HeightVelocity - var.LastHeightVelocity) * 2, -1, 1) * var.frame_time + ((clamp(var.HeightVelocity * 4, -0.2, 0.2) - var.VerticalVelocity1 / 1.5) - var.VerticalMotion1) / 4 * var.frame_time",
					"var.VerticalVelocity2": "var.VerticalVelocity2 + clamp((var.HeightVelocity - var.LastHeightVelocity) * 1, -1, 1) * var.frame_time + ((clamp(var.HeightVelocity * -2, -0.2, 0.2) - var.VerticalVelocity2 / 1.5) - var.VerticalMotion2) / 6 * var.frame_time",
					"var.FallVelocity1": "var.FallVelocity1 + clamp((var.HeightVelocity - var.LastHeightVelocity) * 1, -1, 1) * 2.5 * var.frame_time + ((0 - var.FallVelocity1 / 0.5) - var.FallMotion1) / 6 * var.frame_time",
					"var.FallVelocity2": "var.FallVelocity2 + clamp((var.HeightVelocity - var.LastHeightVelocity) * 1, -1, 1) * 2.5 * var.frame_time + ((0 - var.FallVelocity2 / 0.6) - var.FallMotion2) / 8 * var.frame_time",
					"var.StrafeVelocity1": "var.StrafeVelocity1 + ((0 - var.StrafeVelocity1 / 1) - var.StrafeMotion1) / 4 * var.frame_time",
					"var.StrafeVelocity2": "var.StrafeVelocity2 + ((0 - var.StrafeVelocity2 / 1) - var.StrafeMotion2) / 8 * var.frame_time",
					"var.VerticalMotion1": "clamp(var.VerticalMotion1 + (hurt_time * -0.01 * if(randomb(age * pi * 58), -1, 1)) * var.frame_time + if(is_sneaking, 0.02, 0) * var.frame_time + if(abs(var.VerticalVelocity1) > 2, 0, var.VerticalVelocity1) * 0.1 * (1 - var.is_hoprunning / 1.5) * (1 - var.ClimbingIntensity / 1.5) * var.frame_time, -2, 2)",
					"var.VerticalMotion2": "clamp(var.VerticalMotion2 + (hurt_time * -0.005 * if(randomb(age * pi * 58), -1, 1)) * var.frame_time + if(is_sneaking, 0.01, 0) * var.frame_time + if(abs(var.VerticalVelocity2) > 2, 0, var.VerticalVelocity2) * 0.5 * (1 - var.is_hoprunning / 1.5) * (1 - var.ClimbingIntensity / 1.5) * var.frame_time, -2, 2)",
					"var.StrafeMotion1": "clamp(var.StrafeMotion1 + clamp(var.TurningVelocity / -3.2, -0.01, 0.01) * var.frame_time + (hurt_time * -0.01 * if(randomb(age * pi * 29), -1, 1)) * var.frame_time + var.StrafeVelocity1 * 0.25 * var.frame_time, -2, 2)",
					"var.StrafeMotion2": "clamp(var.StrafeMotion2 + clamp(var.TurningVelocity / -3.2, -0.01, 0.01) * var.frame_time + (hurt_time * -0.005 * if(randomb(age * pi * 29), -1, 1)) * var.frame_time + var.StrafeVelocity2 * 0.25 * var.frame_time, -2, 2)",
					"var.FallMotion1": "clamp(if(var.is_hoprunning > 0 || is_riding, 0, var.FallMotion1 + var.FallVelocity1 * var.frame_time), -2, 2)",
					"var.FallMotion2": "clamp(if(var.is_hoprunning > 0 || is_riding, 0, var.FallMotion2 + var.FallVelocity2 * var.frame_time), -2, 2)",
					"var.OnGroundIntensity": "var.OnGroundIntensity + (if(is_on_ground, 1, 0) - var.OnGroundIntensity) / 8 * var.frame_time",
					"var.WaterPoseIntensity": "if(!is_swimming, var.WaterPoseIntensity + (if(is_in_water, 1 - var.HeightVelocity * 20, 0) - var.WaterPoseIntensity) / 14 * var.frame_time, 0)",
					"var.WetPoseIntensity": "var.WetPoseIntensity + (if(is_wet && !is_in_water, 1 - var.HeightVelocity * 10, 0) - var.WetPoseIntensity) / 28 * var.frame_time",
					"var.IdleIntensity": "var.IdleIntensity + (if(abs(move_forward) < 0.5, 1, 0) - var.IdleIntensity) / 14 * var.frame_time",
					"var.HeadHorizontal": "head_yaw / 60 + sin((var.player_time) * 0.05 + cos((var.player_time) * 0.1 - 2)) * 0.15 * if(is_sneaking, 0.5, 1) * var.IdleIntensity",
					"var.HeadVertical": "head_pitch / -60 + cos((var.player_time) * 0.08 + sin((var.player_time)* 0.16 - 2)) * 0.05 * if(is_sneaking, 0.5, 1) * var.IdleIntensity",
					"var.SprintingVactor": "var.SprintingVactor + (if(is_sprinting && !is_swimming && var.is_levitating < 1 && var.is_hoprunning < 1, 2, 1) - var.SprintingVactor) / 10 * var.frame_time",
					"var.HopRunTogglePatch": "if(abs(abs(var.HeightVelocity) / var.HeightVelocity) > 0, abs(var.HeightVelocity) / var.HeightVelocity, var.HopRunTogglePatch)",
					"var.has_jumped": "if(var.HeightVelocity > 0 && var.HopRunTogglePatch != var.HopRunTogglePatchOld, 1, 0)",
					"var.HopRunTogglePatchOld": "var.HopRunTogglePatch",
					"var.is_jumping": "if(var.has_jumped > 0, 1, if(is_on_ground, 0, var.is_jumping))",
					"var.is_hoprunning": "if(is_sprinting && var.is_jumping > 0 && !is_swimming && var.AirFallIntensity < 0.1, 1, 0)",
					"var.HopRunningIntensity": "var.HopRunningIntensity + (var.is_hoprunning - var.HopRunningIntensity) / 8 * var.frame_time",
					"var.HopRunTimer": "if(var.is_hoprunning > 0, var.HopRunTimer, round(var.WalkTimer / torad(180)) * torad(180)) + if(var.has_jumped > 0, torad(180), 0)",
					"var.HopRunIntensity": "(1 - var.GlideIntensity) * (1 - var.SwimIntensity) * if(var.is_hoprunning > 0, var.HopRunIntensity + (1 - var.HopRunIntensity) / 3 * var.frame_time, var.HopRunIntensity + (0 - var.HopRunIntensity) / 5 * var.frame_time)",
					"var.SwimIntensity": "if(is_swimming, 1, 0)",
					"var.GlideIntensity": "if(is_gliding, 1, 0)",
					"var.LevitateIntensity": "var.LevitateIntensity + (if(var.is_levitating > 0, 1, 0) - var.LevitateIntensity) / 4 * var.frame_time",
					"var.LevitateFB": "move_forward * limb_speed * var.LevitateIntensity",
					"var.LevitateLR": "move_strafing * limb_speed * -var.LevitateIntensity",
					"var.LevitateTimer": "var.LevitateTimer + var.frame_time * 0.05",
					"var.LevitateSide": "if(var.LevitateSide == 0, 1, var.LevitateSide) * if(is_on_ground, -1, 1)",
					"var.AirTimer": "if(!is_on_ground, var.AirTimer + var.frame_time * 0.1, 0)",
					"var.AirFallTimer": "var.AirFallTimer + var.frame_time * 0.25 * (0.5 + var.AirFallIntensity / 2)",
					"var.AirFallIntensity": "(1 - var.ClimbingIntensity) * (1 - var.GlideIntensity) * (1 - var.LevitateIntensity) * if(var.AirTimer > 5 && !is_in_water || is_in_water && !is_on_ground && !is_riding && !is_sitting, var.AirFallIntensity + (if(is_in_water && !is_on_ground, 0.2, 1) - var.AirFallIntensity) / 248 * var.frame_time, var.AirFallIntensity + (0 - var.AirFallIntensity) / 7 * var.frame_time)",
					"var.ClimbingIntensity": "var.ClimbingIntensity + (if(is_climbing && !is_on_ground, 1, 0) - var.ClimbingIntensity) / 7 * var.frame_time",
					"var.ClimbingTimer": "pos_y * 5.75",
					"var.ClimbingRightTimer": "var.ClimbingTimer",
					"var.ClimbingLeftTimer": "var.ClimbingTimer + torad(180)",
					"var.WalkTimer": "if(is_swimming, 0, 1) * (var.WalkTimer + if(var.is_hoprunning > 0, (var.HopRunTimer - var.WalkTimer) / 6 * var.frame_time, (var.LimbSwing_Delta * 0.7 * clamp(var.OnGroundIntensity + 0.5, 0, 1) + if(is_on_ground, var.HeightVelocity * 0.5, 0)) * if(is_sprinting, var.SprintingVactor * 0.5, 1)))",
					"var.WalkRightTimer": "var.WalkTimer",
					"var.WalkLeftTimer": "var.WalkTimer + torad(180)",
					"var.WalkIntensityRaw": "(1 - var.LevitateIntensity) * (1 - var.GlideIntensity) * (1 - var.SwimIntensity) * (clamp(limb_speed * (var.HopRunningIntensity + var.OnGroundIntensity + 0.4), 0, 1) * if(is_sprinting, 1.2, 1) * ((var.WaterPoseIntensity * 1) + 1))",
					"var.WalkIntensity": "(1 - var.LevitateIntensity) * (1 - var.GlideIntensity) * (1 - var.SwimIntensity) * (clamp(limb_speed * (var.HopRunningIntensity + var.OnGroundIntensity + 0.4), 0, 1) * if(is_sprinting, 1.2, 1) * ((var.WaterPoseIntensity * 1) + 1) + var.HopRunIntensity * 0.25)",
					"var.SneakingIntensity": "if(is_sneaking, 0.75, 0)",
					"var.SneakingTimer": "if(is_sneaking, var.SneakingTimer + var.frame_time * 0.1, 0)",
					"var.SneakyDanceTimer": "if(var.SneakingTimer > 20, var.SneakyDanceTimer + var.frame_time * 0.175, 0)",
					"var.SneakyDanceIntensity": "if(var.SneakingTimer > 20 && (abs(move_forward) + abs(move_strafing) < 1), var.SneakyDanceIntensity + (0.15 - var.SneakyDanceIntensity) / 128 * var.frame_time, var.SneakyDanceIntensity + (0 - var.SneakyDanceIntensity) / 8 * var.frame_time)",
					"var.is_flaming": "if(is_burning && fluid_depth == 0 && !is_riding && !is_sitting && var.GlideIntensity < 1, 1, 0)",
					"var.FlamingTimer": "var.player_time * 0.7",
					"var.FlamingIntensity": "var.FlamingIntensity + (if(var.is_flaming > 0, 1, 0) - var.FlamingIntensity) / 7 * var.frame_time",
					"var.is_boiling": "if(is_burning && abs(fluid_depth) > 0 && !is_riding && !is_sitting && var.GlideIntensity < 1, 1, 0)",
					"var.BoilingTimer": "var.player_time * 0.7",
					"var.BoilingIntensity": "var.BoilingIntensity + (if(var.is_boiling > 0, 1, 0) - var.BoilingIntensity) / 7 * var.frame_time",
					"var.LastLimbSwing": "limb_swing",
					"var.LastOnGround": "is_on_ground * 1",
					"var.LastHeight": "pos_y",
					"var.LastDirection": "head_yaw",
					"var.LastHeightVelocity": "var.HeightVelocity",
					"var.LastSneaking": "is_sneaking * 1",
					"var.LastPlayerTime": "var.player_time",
					"var.LastFrameTime2": "var.LastFrameTime1",
					"var.LastFrameTime1": "var.frame_time_raw",
					"var.LastFrameCount": "frame_counter"
				},
				{
					"var.is_holding_item_right": "if(is_holding_item_right, 1, 0)",
					"var.is_holding_item_left": "if(is_holding_item_left, 1, 0)"
				},
				{
					"var.move_swing": "(1 - var.GlideIntensity) * (1 - var.SwimIntensity) * limb_swing * 0.6662",
					"var.MLS": "(1 - var.GlideIntensity) * (1 - var.SwimIntensity) * 1.4",
					"var.LegRotWalk": "cos(var.move_swing) * limb_speed * var.MLS",
					"var.ArmRotWalk": "(1 - var.GlideIntensity) * (1 - var.SwimIntensity) * cos(var.move_swing + torad(180)) * limb_speed"
				},
				{
					"var.right_leg_walk_y": "cos(var.WalkRightTimer - 0.1) * 2 * var.WalkIntensity + sin(var.WalkRightTimer + 2) * 2.5 * var.WalkIntensity",
					"right_leg.rx": "right_leg.rx - var.LegRotWalk + (1 + var.HopRunIntensity * 0.5) * sin(var.WalkRightTimer + 0.5) * var.WalkIntensity * 0.5 + var.WalkIntensity * 0.05 / var.SprintingVactor - clamp(var.HeadHorizontal / 12, -10, 0) + sin(var.LevitateTimer - var.LevitateSide) * var.LevitateIntensity * 0.05 + var.LevitateIntensity * 0.1 + var.LevitateFB * 0.3 + clamp(cos(var.ClimbingRightTimer - 1) * var.ClimbingIntensity * -0.2 - var.ClimbingIntensity * 0.1, -0.2, 2) - if(is_on_ground, var.FallMotion1, 0) * -1.6 + sin(var.AirFallTimer - torad(90)) * var.AirFallIntensity * 0.2 + abs(sin(var.FlamingTimer / 2 - 0.2) * var.FlamingIntensity) * 0.1",
					"right_leg.ry": "right_leg.ry + var.HeadHorizontal / 8 * var.WalkIntensity + var.FlamingIntensity * 0.1",
					"right_leg.rz": "right_leg.rz * var.WalkIntensity * 0.5 + var.LevitateLR * 0.3 + sin(var.SneakyDanceTimer) * -var.SneakyDanceIntensity + cos(var.AirFallTimer - torad(90)) * var.AirFallIntensity * 0.05 + var.AirFallIntensity * 0.05",
					"right_leg.tx": "right_leg.tx + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * -12 + cos(var.AirFallTimer) * var.AirFallIntensity * -1",
					"right_leg.ty": "right_leg.ty + if(is_on_ground || var.is_hoprunning > 0, clamp(var.right_leg_walk_y, -20, 0), var.right_leg_walk_y / 2 - var.WalkIntensity) + clamp(var.LevitateSide * var.LevitateIntensity * 3 + sin(var.LevitateTimer - var.LevitateSide - 1) * var.LevitateIntensity * 0.5, -5, 0) * (1 - abs(var.LevitateFB) / 1.5) + sin(var.ClimbingRightTimer) * var.ClimbingIntensity * 2.5 - var.ClimbingIntensity * 3 + if(is_on_ground, 0, var.FallMotion1) * 16 - abs(sin(var.FlamingTimer / 2 - 0.1 + abs(cos(var.FlamingTimer / 2 - 0.1)) * 0.5) * var.FlamingIntensity) * 4",
					"right_leg.tz": "right_leg.tz + cos(var.WalkRightTimer - 0.1) * 1.75 * var.WalkIntensity - var.WalkIntensity * 0.5 + var.HeadHorizontal + clamp(var.LevitateSide * var.LevitateIntensity * 2.5, -3, 0) * (1 - abs(var.LevitateFB) / 1.5) + clamp(cos(var.ClimbingRightTimer + 0.2) * var.ClimbingIntensity * -2.75, -1.75, 2) - var.ClimbingIntensity * 2 - if(is_on_ground, var.FallMotion1, 0) * 16 - abs(sin(var.FlamingTimer / 2 + 0.2) * var.FlamingIntensity) * 2"
				},
				{
					"var.left_leg_walk_y": "cos(var.WalkLeftTimer - 0.1) * 2 * var.WalkIntensity + sin(var.WalkLeftTimer + 2) * 2.5 * var.WalkIntensity",
					"left_leg.rx": "left_leg.rx + var.LegRotWalk + (1 + var.HopRunIntensity * 0.5) * sin(var.WalkLeftTimer + 0.5) * var.WalkIntensity * 0.5 + var.WalkIntensity * 0.05 / var.SprintingVactor + clamp(var.HeadHorizontal / 12, 0, 10) + sin(var.LevitateTimer + var.LevitateSide) * var.LevitateIntensity * 0.05 + var.LevitateIntensity * 0.1 + var.LevitateFB * 0.3 + clamp(cos(var.ClimbingLeftTimer - 1) * var.ClimbingIntensity * -0.2 - var.ClimbingIntensity * 0.01, -0.2, 2) - if(is_on_ground, var.FallMotion2, 0) * -1.6 + sin(var.AirFallTimer + torad(180) - torad(90)) * var.AirFallIntensity * 0.2 + abs(sin(torad(90) + var.FlamingTimer / 2 - 0.2) * var.FlamingIntensity) * 0.1",
					"left_leg.ry": "left_leg.ry + var.HeadHorizontal / 8 * var.WalkIntensity + var.FlamingIntensity * -0.1",
					"left_leg.rz": "left_leg.rz + var.LevitateLR * 0.3 + sin(var.SneakyDanceTimer) * -var.SneakyDanceIntensity + cos(var.AirFallTimer + torad(180) - torad(90)) * var.AirFallIntensity * 0.05 + var.AirFallIntensity * -0.05",
					"left_leg.tx": "left_leg.tx + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * -12 + cos(var.AirFallTimer) * var.AirFallIntensity * -1",
					"left_leg.ty": "left_leg.ty + if(is_on_ground || var.is_hoprunning > 0, clamp(var.left_leg_walk_y, -20, 0), var.left_leg_walk_y / 2 - var.WalkIntensity) + clamp(var.LevitateSide * -var.LevitateIntensity * 3 + sin(var.LevitateTimer + var.LevitateSide - 1) * var.LevitateIntensity * 0.5, -5, 0) * (1 - abs(var.LevitateFB) / 1.5) + sin(var.ClimbingLeftTimer) * var.ClimbingIntensity * 2.5 - var.ClimbingIntensity * 3 + if(is_on_ground, 0, var.FallMotion2) * 16 - abs(sin(torad(90) + var.FlamingTimer / 2 - 0.1 + abs(cos(torad(90) + var.FlamingTimer / 2 - 0.1)) * 0.5) * var.FlamingIntensity) * 4",
					"left_leg.tz": "left_leg.tz + cos(var.WalkLeftTimer - 0.1) * 1.75 * var.WalkIntensity - var.WalkIntensity * 0.5 - var.HeadHorizontal + clamp(var.LevitateSide * -var.LevitateIntensity * 2.5, -3, 0) * (1 - abs(var.LevitateFB) / 1.5) + clamp(cos(var.ClimbingLeftTimer + 0.2) * var.ClimbingIntensity * -2.75, -1.75, 2) - var.ClimbingIntensity * 2 - if(is_on_ground, var.FallMotion2, 0) * 16 - abs(sin(torad(90) + var.FlamingTimer / 2 + 0.2) * var.FlamingIntensity) * 2"
				},
				{
					"var.body_rx": "var.VerticalMotion1 + (sin(var.WalkTimer * 2 + cos(var.WalkTimer * 2) * 0.2)) * var.WalkIntensity * 0.05 + var.WalkIntensity * 0.1 / (1 + var.SneakingIntensity) / var.SprintingVactor - var.HeadVertical / 4 + (var.SprintingVactor - 1) * 0.1 + sin(var.LevitateTimer - 0.3) * var.LevitateIntensity * 0.05 - var.LevitateIntensity * 0.1 * (1 - abs(var.LevitateFB) / 1.5) + var.LevitateFB * 0.2 + sin(var.ClimbingLeftTimer * 2 + 0.1) * var.ClimbingIntensity * 0.04 - var.ClimbingIntensity * 0.05 - if(is_sneaking, 0.15, 0) + (var.FallMotion1 + var.FallMotion2) / 2 * 0.5",
					"var.body_ry": "var.HeadHorizontal / 2 + sin(var.WalkRightTimer + 0.5) * var.WalkIntensity * -0.1 + var.LevitateSide * 0.1 * var.LevitateIntensity + cos(var.ClimbingRightTimer + 0.1) * var.ClimbingIntensity * 0.2",
					"var.body_rz": "var.HeadHorizontal / -32 - var.HeadHorizontal * var.WalkIntensity * 0.05 + var.StrafeMotion1 * 0.5 + var.LevitateLR * 0.3 + cos(var.ClimbingRightTimer - 0.5) * var.ClimbingIntensity * 0.025 + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity + cos(var.AirFallTimer) * var.AirFallIntensity * 0.2 + sin(var.FlamingTimer) * var.FlamingIntensity * -0.05 + sin(var.BoilingTimer) * var.BoilingIntensity * -0.05",
					"var.body_tx": "(var.HeadHorizontal * 0 * sin(var.HeadVertical) - var.HeadHorizontal * 0.5) * (1 + var.SneakingIntensity * 4) - var.HeadHorizontal * var.WalkIntensity * 0.5 + var.StrafeMotion1 * 5 + var.LevitateLR * 3 + cos(var.ClimbingRightTimer - 0.5) * var.ClimbingIntensity * 0.25 + cos(var.AirFallTimer) * var.AirFallIntensity * 1 + sin(var.FlamingTimer) * var.FlamingIntensity * -0.5 + sin(var.BoilingTimer) * var.BoilingIntensity * -0.5",
					"var.body_ty": "abs(var.VerticalMotion * 2) + (sin(var.WalkTimer * 2 - 1 + cos(var.WalkTimer * 2 - 1) * 0.2)) * var.WalkIntensity * 0.5 + var.WalkIntensity * 0.1 - var.SneakingIntensity / 0.5 + cos(var.SneakyDanceTimer * 2) * -var.SneakyDanceIntensity + if(is_on_ground, (var.FallMotion1 + var.FallMotion2) / 2, 0) * 8 - abs(sin(var.FlamingTimer + abs(cos(var.FlamingTimer)) * 0.5) * var.FlamingIntensity) + abs(var.VerticalMotion1) * 1",
					"var.body_tz": "var.VerticalMotion1 * -7.5 + (sin(var.WalkTimer * 2 - 1 + cos(var.WalkTimer * 2 - 1) * 0.2)) * var.WalkIntensity * -0.5 / var.SprintingVactor - var.WalkIntensity * 1 * var.SprintingVactor * 0.75 + var.HeadVertical * 3 + (var.SprintingVactor - 1) * -0.5 + var.HeadHorizontal * (0.5 * abs(var.HeadVertical)) - sin(var.HeadVertical) + sin(var.LevitateTimer - 0.3) * var.LevitateIntensity * -0.5 + var.LevitateIntensity * 1 * (1 - abs(var.LevitateFB) / 1.5) - var.LevitateFB * 2 + sin(var.ClimbingLeftTimer * 2 + 0.1) * var.ClimbingIntensity * -0.4 + var.ClimbingIntensity * 1 - (var.FallMotion1 + var.FallMotion2) / 2 * 5",
					"body.rx": "body.rx + var.body_rx",
					"body.ry": "body.ry + var.body_ry",
					"body.rz": "body.rz + var.body_rz",
					"body.tx": "body.tx + var.body_tx",
					"body.ty": "body.ty + var.body_ty",
					"body.tz": "body.tz + var.body_tz"
				},
				{
					"head.rx": "head.rx + sin(var.WalkTimer) * var.WalkIntensity * 0.05 - var.WetPoseIntensity * 0.1 - var.HeadVertical + head_pitch / -60 - var.VerticalMotion2 * 1.5 + sin(var.ClimbingRightTimer * 2 - 0.1) * var.ClimbingIntensity * 0.01 + cos(var.SneakyDanceTimer * 2 - 0.5) * var.SneakyDanceIntensity * 0.1 + sin(var.FlamingTimer * 2 - 0.1) * var.FlamingIntensity * 0.05 + var.FlamingIntensity * 0.1 + sin(var.BoilingTimer * 2 - 0.1) * var.BoilingIntensity * 0.05 - var.BoilingIntensity * 0.1",
					"head.ry": "head.ry + var.HeadHorizontal - head_yaw / 60",
					"head.rz": "head.rz + sin(var.WalkTimer - 0.5) * var.WalkIntensity * 0.025 + var.StrafeMotion2 + sin(var.SneakyDanceTimer - 0.5) * var.SneakyDanceIntensity * 0.5 + cos(var.AirFallTimer - 1.5) * var.AirFallIntensity * 0.1 + cos(var.FlamingTimer - 0.1) * var.FlamingIntensity * 0.05 + cos(var.BoilingTimer - 0.1) * var.BoilingIntensity * 0.05",
					"head.tx": "head.tx + var.body_tx",
					"head.tz": "head.tz + var.body_tz",
					"head.ty": "head.ty + var.body_ty + var.WetPoseIntensity * 0.1"
				},
				{
					"var.left_arm_rx": "var.VerticalMotion2 * 1.5 + var.ArmRotWalk / (var.is_holding_item_left + 1) + (1 + var.HopRunIntensity) * (sin(var.WalkRightTimer) - sin(var.WalkRightTimer - 1) * 0.5) * var.WalkIntensity / if(var.is_holding_item_left > 0, 1.5, 1) * if(is_blocking, 0.1, 1) * 0.75 * clamp(var.SprintingVactor, 0, 1) - var.HeadHorizontal * 0.1 + var.HeadHorizontal * 0.1 + sin(var.LevitateTimer + 0.3) * var.LevitateIntensity * 0.1 + var.LevitateFB * 0.2 + sin(var.ClimbingRightTimer) * var.ClimbingIntensity * 0.5 - var.ClimbingIntensity * 1.5 + if(is_riding, var.WetPoseIntensity * 0.2, 0) + sin(var.AirFallTimer - 1) * var.AirFallIntensity * 0.25",
					"var.left_arm_rz": "-abs(var.VerticalMotion2) + sin(var.WalkRightTimer * 2) * var.WalkIntensity * 0.025 - var.WalkIntensity * 0.005 - if(is_sneaking, 0.1, 0) + var.WaterPoseIntensity * torad(-60) + if(var.StrafeVelocity2 * -0.5 < 0, var.StrafeVelocity2 * -0.5, var.StrafeVelocity2 * 0.5) + sin(var.LevitateTimer - 0.3) * var.LevitateIntensity * 0.05 + var.LevitateIntensity * -0.2 + var.LevitateLR * 0.3 + sin(var.SneakyDanceTimer - 0.25) * var.SneakyDanceIntensity + var.AirFallIntensity * torad(-80) + cos(var.AirFallTimer - 1) * var.AirFallIntensity * 0.5 + var.FlamingIntensity * torad(-60) + sin(var.FlamingTimer - 1) * var.FlamingIntensity * -0.25 + var.BoilingIntensity * torad(-60) + sin(var.BoilingTimer - 1) * var.BoilingIntensity * -0.25",
					"var.left_arm_ry": "var.body_ry / 1.5 - sin(var.WalkRightTimer) * var.WalkIntensity * 0.05 - if(is_riding, var.HeadHorizontal / 4, 0) + var.LevitateIntensity * -0.2 + var.FlamingIntensity * -0.1 + var.BoilingIntensity * -0.1",
					"var.left_arm_tx": "var.body_tx - abs(sin(var.HeadHorizontal)) + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * -3",
					"var.left_arm_ty": "var.body_ty + 0.5 - var.WetPoseIntensity * 1 + (sin(var.WalkRightTimer - var.WalkIntensity * 0.5) - sin(var.WalkRightTimer - 1 - var.WalkIntensity * 0.5) * 0.5) * var.WalkIntensity * 0.5 + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * 3",
					"var.left_arm_tz": "var.body_tz - var.body_ry * 4 + var.SneakingIntensity / 0.8 + (sin(var.WalkRightTimer) - sin(var.WalkRightTimer - 1) * 0.5) * var.WalkIntensity * 1 + var.ClimbingIntensity * 0.5 + (cos(var.ClimbingLeftTimer) - var.HeadVertical / 2) * var.ClimbingIntensity * 1",
					"left_arm.rx": "left_arm.rx + var.left_arm_rx * if(is_first_person_hand, 0, 1)",
					"left_arm.ry": "left_arm.ry + var.left_arm_ry * if(is_first_person_hand, 0, 1)",
					"left_arm.rz": "left_arm.rz + var.left_arm_rz * if(is_first_person_hand, 0, 1)",
					"left_arm.tx": "left_arm.tx + var.left_arm_tx * if(is_first_person_hand, 0, 1)",
					"left_arm.ty": "left_arm.ty + var.left_arm_ty * if(is_first_person_hand, 0, 1)",
					"left_arm.tz": "left_arm.tz + var.left_arm_tz * if(is_first_person_hand, 0, 1)"
				},
				{
					"var.right_arm_rx": "var.VerticalMotion2 * 1.5 - var.ArmRotWalk / (var.is_holding_item_right + 1) + (1 + var.HopRunIntensity) * (sin(var.WalkLeftTimer) - sin(var.WalkLeftTimer - 1) * 0.5) * var.WalkIntensity / if(var.is_holding_item_left > 0, 1.5, 1) * if(is_blocking, 0.1, 1) * 0.75 * clamp(var.SprintingVactor, 0, 1) + var.SprintingVactor * 0.1 + var.HeadHorizontal * 0.1 + sin(var.LevitateTimer + 0.6) * var.LevitateIntensity * 0.1 + var.LevitateFB * 0.2 + sin(var.ClimbingLeftTimer) * var.ClimbingIntensity * 0.5 - var.ClimbingIntensity * 1.5 + if(is_riding, var.WetPoseIntensity * 0.2, 0) + sin(var.AirFallTimer - 1) * var.AirFallIntensity * -0.25",
					"var.right_arm_rz": "abs(var.VerticalMotion2) + sin(var.WalkLeftTimer * 2) * var.WalkIntensity * -0.025 + var.WalkIntensity * 0.005 + if(is_sneaking, 0.1, 0) + var.WaterPoseIntensity * torad(60) + if(var.StrafeVelocity2 * 0.5 < 0, var.StrafeVelocity2 * -0.5, var.StrafeVelocity2 * 0.5) + sin(var.LevitateTimer - 0.6) * var.LevitateIntensity * -0.05 + var.LevitateIntensity * 0.2 + var.LevitateLR * 0.3 + sin(var.SneakyDanceTimer - 0.25) * var.SneakyDanceIntensity + var.AirFallIntensity * torad(80) + cos(var.AirFallTimer - 1) * var.AirFallIntensity * 0.5 + var.FlamingIntensity * torad(60) + sin(var.FlamingTimer - 1) * var.FlamingIntensity * -0.25 + var.BoilingIntensity * torad(60) + sin(var.BoilingTimer - 1) * var.BoilingIntensity * -0.25",
					"var.right_arm_ry": "var.body_ry / 1.5 + sin(var.WalkLeftTimer) * var.WalkIntensity * 0.05 +  - if(is_riding, var.HeadHorizontal / 4, 0) + var.LevitateIntensity * 0.2 + var.FlamingIntensity * 0.1 + var.BoilingIntensity * 0.1",
					"var.right_arm_tx": "var.body_tx + abs(sin(var.HeadHorizontal)) + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * -3",
					"var.right_arm_ty": "var.body_ty + 0.5 - var.WetPoseIntensity * 1 + (sin(var.WalkLeftTimer - var.WalkIntensity * 0.5) - sin(var.WalkLeftTimer - 1- var.WalkIntensity * 0.5) * 0.5) * var.WalkIntensity * 0.5 + sin(var.SneakyDanceTimer) * var.SneakyDanceIntensity * -3",
					"var.right_arm_tz": "var.body_tz + var.body_ry * 4 + var.SneakingIntensity / 0.8 + (sin(var.WalkLeftTimer) - sin(var.WalkLeftTimer - 1) * 0.5) * var.WalkIntensity * 1 + var.ClimbingIntensity * 0.5 + (cos(var.ClimbingRightTimer) - var.HeadVertical / 2) * var.ClimbingIntensity * 1",
					"right_arm.rx": "right_arm.rx + var.right_arm_rx * if(is_first_person_hand, 0, 1)",
					"right_arm.ry": "right_arm.ry + var.right_arm_ry * if(is_first_person_hand, 0, 1)",
					"right_arm.rz": "right_arm.rz + var.right_arm_rz * if(is_first_person_hand, 0, 1)",
					"right_arm.tx": "right_arm.tx + var.right_arm_tx * if(is_first_person_hand, 0, 1)",
					"right_arm.ty": "right_arm.ty + var.right_arm_ty * if(is_first_person_hand, 0, 1)",
					"right_arm.tz": "right_arm.tz + var.right_arm_tz * if(is_first_person_hand, 0, 1)"
				},
				{
					"cloak.rx": "-var.body_rx",
					"cloak.ry": "cos(cloak.rx * torad(180)) * var.body_ry",
					"cloak.tx": "-var.body_tx",
					"cloak.ty": "cos(cloak.rx) * var.body_ty - sin(cloak.rx) * var.body_tz + if(is_sneaking, 2, 0)",
					"cloak.tz": "-cos(cloak.rx) * var.body_tz - sin(cloak.rx) * var.body_ty + if(is_sneaking, 1, 0)"
				}
			]
		},
		{
			"part": "ear",
			"id": "ear",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-3, 24, -1, 6, 6, 1], "textureOffset": [24, 0]}
			],
			"animations": [
				{
					"var.body_tx": "body.tx",
					"var.body_ty": "body.ty",
					"var.body_tz": "body.tz"
				}
			]
		},
		{
			"part": "head",
			"id": "head",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-4, 24, -4, 8, 8, 8], "textureOffset": [0, 0]}
			]
		},
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-4, 24, -4, 8, 8, 8], "textureOffset": [32, 0], "sizeAdd": 0.5}
			]
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [16, 16]}
			]
		},
		{
			"part": "jacket",
			"id": "jacket",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-4, 12, -2, 8, 12, 4], "textureOffset": [16, 32], "sizeAdd": 0.25}
			]
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [-5, -21.5, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [4, 11.5, -2, 3, 12, 4], "textureOffset": [40, 16]}
			]
		},
		{
			"part": "right_sleeve",
			"id": "right_sleeve",
			"invertAxis": "xy",
			"translate": [-5, -21.5, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [4, 11.5, -2, 3, 12, 4], "textureOffset": [40, 32], "sizeAdd": 0.25}
			]
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"translate": [5, -21.5, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-7, 11.5, -2, 3, 12, 4], "textureOffset": [32, 48]}
			]
		},
		{
			"part": "left_sleeve",
			"id": "left_sleeve",
			"invertAxis": "xy",
			"translate": [5, -21.5, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-7, 11.5, -2, 3, 12, 4], "textureOffset": [48, 48], "sizeAdd": 0.25}
			]
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [-1.9, -12, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-0.1, 0, -2, 4, 12, 4], "textureOffset": [0, 16]}
			]
		},
		{
			"part": "right_pants",
			"id": "right_pants",
			"invertAxis": "xy",
			"translate": [-1.9, -12, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-0.1, 0, -2, 4, 12, 4], "textureOffset": [0, 32], "sizeAdd": 0.25}
			]
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [1.9, -12, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-3.9, 0, -2, 4, 12, 4], "textureOffset": [16, 48]}
			]
		},
		{
			"part": "left_pants",
			"id": "left_pants",
			"invertAxis": "xy",
			"translate": [1.9, -12, 0],
			"scale": 1,
			"boxes": [
				{"coordinates": [-3.9, 0, -2, 4, 12, 4], "textureOffset": [0, 48], "sizeAdd": 0.25}
			]
		}
	]
}